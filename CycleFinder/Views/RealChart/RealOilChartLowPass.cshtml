@model CycleFinder.Models.RealChartViewModel

@{
    ViewData["Title"] = "About";
}


<div id="containerWave" style="width: 1000px; height: 500px; margin: 0 auto"></div>
<div id="containerFilters" style="width: 1000px; height: 500px; margin: 0 auto"></div>
<div id="containerKernel" style="width: 1000px; height: 500px; margin: 0 auto"></div>
<div id="containerKernelFrequencyResponse" style="width: 1000px; height: 500px; margin: 0 auto"></div>


<script language="JavaScript">
function drawChartWave() {
   // Define the chart to be drawn.
   var data = new google.visualization.DataTable();
   data.addColumn('number', 'Time');
   data.addColumn('number', 'Price');
   data.addRows([
   @Html.RowsFor(model => model.Commodity);
   ]);
   
   // Set chart options
   var options = {'title' : 'Oil Chart',
      hAxis: {
         title: 'Time'
      },
      vAxis: {
         title: 'Price'
      },   
      'width': 900, 
      'height':500    
   };

   // Instantiate and draw the chart.
   //var chart = new google.charts.Line(document.getElementById('containerWave'));
    var chart = new google.visualization.LineChart(document.getElementById('containerWave'));
    chart.draw(data, options);
   //chart.draw(data, google.charts.Line.convertOptions(options));    
}
    
function drawChartFilters() {
   // Define the chart to be drawn.
   var data = new google.visualization.DataTable();
   data.addColumn('number', 'Time');
   data.addColumn('number', 'Filter Price');
   data.addColumn('number', 'Comm Price');
   data.addRows([
       @Html.RowsFor(model => new List<List<double>> { model.FilteredCommodity, model.Commodity},200)
	   
     
   ]);
   
   // Set chart options
   var options = {'title' : 'Low Pass Filter Applied to Wave Chart',
      
      hAxis: {
         title: 'Time'
      },
      vAxis: {
         title: 'Price'
         
      },   
      'width': 900, 
      'height':500    
   };    

   // Instantiate and draw the chart.
   //var chart = new google.charts.Line(document.getElementById('containerBandPass'));
    var chart = new google.visualization.LineChart(document.getElementById('containerFilters'));
    chart.draw(data, options);
   //chart.draw(data, google.charts.Line.convertOptions(options));
}

function drawChartKernel() {
   // Define the chart to be drawn.
   var data = new google.visualization.DataTable();
   data.addColumn('number', 'SampleNo');
   data.addColumn('number', 'Amplitude');
  
   data.addRows([
        @Html.RowsFor(model => model.DigitalFilter.Kernel)
   ]);
   
   // Set chart options
   var options = {'title' : 'Low Pass Filter',
      
      hAxis: {
         title: 'Sample Number'
      },
      vAxis: {
         title: 'Amplitude'
         
      },   
      'width': 900, 
      'height':500    
   };   

   // Instantiate and draw the chart.
   //var chart = new google.charts.Line(document.getElementById('containerBandPass'));
    var chart = new google.visualization.LineChart(document.getElementById('containerKernel'));
    chart.draw(data, options);
   //chart.draw(data, google.charts.Line.convertOptions(options));
}

function drawChartKernelFrequencyResponse() {
   // Define the chart to be drawn.
   var data = new google.visualization.DataTable();
   data.addColumn('number', 'Frequency');
   data.addColumn('number', 'Amplitude');
  
   data.addRows([
        @Html.RowsFor(model => Fourier.DFT(model.DigitalFilter.Kernel), model => model.SampleRate/model.DigitalFilter.Kernel.Count, 20 ) 
   ]);
   
   // Set chart options
   var options = {'title' : 'Kernel Frequency Response at Frequency Rate',
      
      hAxis: {
         title: 'Frequency'
      },
      vAxis: {
         title: 'Amplitude'
         
      },   
      'width': 900, 
      'height':500    
   };   

   // Instantiate and draw the chart.
   //var chart = new google.charts.Line(document.getElementById('containerBandPass'));
    var chart = new google.visualization.LineChart(document.getElementById('containerKernelFrequencyResponse'));
    chart.draw(data, options);
   //chart.draw(data, google.charts.Line.convertOptions(options));
}
    
//google.charts.load('current', {'packages': ['line']});
    google.charts.load('current', {'packages': ['corechart']});
google.charts.setOnLoadCallback(drawChartWave);
google.charts.setOnLoadCallback(drawChartFilters);
google.charts.setOnLoadCallback(drawChartKernel);
google.charts.setOnLoadCallback(drawChartKernelFrequencyResponse);
</script>
